package Vistas;

import AccesoADatos.AlumnoData;
import AccesoADatos.Conexion;
import AccesoADatos.InscripcionData;
import Entidades.Alumno;
import Entidades.Inscripcion;
import Entidades.Materia;
//import java.time.LocalDate;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import com.toedter.calendar.JDateChooser;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Ed Le Franc
 */
public class GestionUniversidadGUI extends javax.swing.JFrame {
    
    private DefaultTableModel modelo = new DefaultTableModel();
    
    //private com.toedter.calendar.JDateChooser JDC_FechaNac;

    
//    AlumnoData alumData = new AlumnoData();
//    Materia mat = new Materia();
//    Inscripcion insc = new Inscripcion();
    /**
     * Creates new form GestionUniversidadGUI
     */
    public GestionUniversidadGUI() {
        initComponents();
        setLocationRelativeTo(null); // Esto setea la posición de la ventana principal de la app en el centro de la pantalla
        eliminarInternalFrames();
        //cargarMateriasComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        IF_Alumno = new javax.swing.JInternalFrame();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        JT_Dni = new javax.swing.JTextField();
        JT_Apellido = new javax.swing.JTextField();
        JT_Nombre = new javax.swing.JTextField();
        btn_Buscar = new javax.swing.JButton();
        RB_Activo = new javax.swing.JRadioButton();
        JDC_FechaNac = new com.toedter.calendar.JDateChooser();
        btn_Guardar_Alumno = new javax.swing.JButton();
        btn_Nuevo_Alumno = new javax.swing.JButton();
        btn_Eliminar_Alumno = new javax.swing.JButton();
        IF_Materia = new javax.swing.JInternalFrame();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        RB_Activo_Materia = new javax.swing.JRadioButton();
        JT_CodigoMateria = new javax.swing.JTextField();
        btn_Buscar_Cod_Materia = new javax.swing.JButton();
        btn_Nuevo_Materia = new javax.swing.JButton();
        btn_Eliminar_Materia = new javax.swing.JButton();
        btn_Guardar_Materia = new javax.swing.JButton();
        btn_Salir_Materia = new javax.swing.JButton();
        JT_NombreMateria = new javax.swing.JTextField();
        JT_AñoMateria = new javax.swing.JTextField();
        IF_Administracion = new javax.swing.JInternalFrame();
        label_Titulo_Insc = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        CB_SeleccionAlumno = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        RB_MateriasInsc = new javax.swing.JRadioButton();
        RB_MateriasNoInsc = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla_Inscripciones = new javax.swing.JTable();
        BTN_Inscripcion = new javax.swing.JButton();
        BTN_AnularInsc = new javax.swing.JButton();
        IF_Consultas = new javax.swing.JInternalFrame();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        SP_Tabla = new javax.swing.JScrollPane();
        TablaListAlumMateria = new javax.swing.JTable();
        CB_Seleccion_Materia = new javax.swing.JComboBox<>();
        IF_ModificacionNotas = new javax.swing.JInternalFrame();
        jLabel17 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        JCB_SelecAlumnos = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        Tabla_Notas = new javax.swing.JTable();
        btn_GuardarNota = new javax.swing.JButton();
        btn_Salir = new javax.swing.JButton();
        Menu_Nav = new javax.swing.JMenuBar();
        JM_Alumno = new javax.swing.JMenu();
        form_alumno = new javax.swing.JMenuItem();
        JM_Materia = new javax.swing.JMenu();
        form_materia = new javax.swing.JMenuItem();
        JM_Admin = new javax.swing.JMenu();
        form_manejoInscripciones = new javax.swing.JMenuItem();
        form_modNotas = new javax.swing.JMenuItem();
        JM_Consultas = new javax.swing.JMenu();
        consulta_alumMaterias = new javax.swing.JMenuItem();
        JM_Salir = new javax.swing.JMenu();
        opcionSalir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jDesktopPane1.setPreferredSize(new java.awt.Dimension(800, 600));
        jDesktopPane1.setLayout(new java.awt.BorderLayout());

        IF_Alumno.setClosable(true);
        IF_Alumno.setTitle("Formulario de  Alumno");
        IF_Alumno.setPreferredSize(new java.awt.Dimension(800, 600));
        IF_Alumno.setVisible(true);
        IF_Alumno.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel1.setText("Alumno");
        IF_Alumno.getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 20, -1, -1));

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setText("DNI");
        IF_Alumno.getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 170, -1, -1));

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setText("Apellido");
        IF_Alumno.getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 220, -1, -1));

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel4.setText("Nombre");
        IF_Alumno.getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 270, -1, -1));

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel5.setText("Estado");
        IF_Alumno.getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 330, -1, -1));

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel6.setText("Fecha de nacimiento");
        IF_Alumno.getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 380, -1, -1));
        IF_Alumno.getContentPane().add(JT_Dni, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 170, 154, -1));
        IF_Alumno.getContentPane().add(JT_Apellido, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 230, 272, -1));
        IF_Alumno.getContentPane().add(JT_Nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 280, 272, -1));

        btn_Buscar.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btn_Buscar.setText("Buscar");
        btn_Buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_BuscarActionPerformed(evt);
            }
        });
        IF_Alumno.getContentPane().add(btn_Buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 160, -1, -1));

        RB_Activo.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        RB_Activo.setText("Activo");
        IF_Alumno.getContentPane().add(RB_Activo, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 320, -1, -1));

        JDC_FechaNac.setDateFormatString("yyyy-MM-dd");
        IF_Alumno.getContentPane().add(JDC_FechaNac, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 370, 313, -1));

        btn_Guardar_Alumno.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btn_Guardar_Alumno.setText("Guardar");
        btn_Guardar_Alumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Guardar_AlumnoActionPerformed(evt);
            }
        });
        IF_Alumno.getContentPane().add(btn_Guardar_Alumno, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 480, -1, -1));

        btn_Nuevo_Alumno.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btn_Nuevo_Alumno.setText("Nuevo");
        btn_Nuevo_Alumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Nuevo_AlumnoActionPerformed(evt);
            }
        });
        IF_Alumno.getContentPane().add(btn_Nuevo_Alumno, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 480, -1, -1));

        btn_Eliminar_Alumno.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btn_Eliminar_Alumno.setText("Eliminar");
        btn_Eliminar_Alumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Eliminar_AlumnoActionPerformed(evt);
            }
        });
        IF_Alumno.getContentPane().add(btn_Eliminar_Alumno, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 480, -1, -1));

        jDesktopPane1.add(IF_Alumno, java.awt.BorderLayout.SOUTH);

        IF_Materia.setClosable(true);
        IF_Materia.setTitle("Formulario de Materias");
        IF_Materia.setPreferredSize(new java.awt.Dimension(800, 600));
        IF_Materia.setVisible(true);

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel7.setText("Materia");

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel8.setText("Código:");

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel9.setText("Nombre:");

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel10.setText("Año:");

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel11.setText("Estado:");

        RB_Activo_Materia.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        RB_Activo_Materia.setText("Activo");

        JT_CodigoMateria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JT_CodigoMateriaActionPerformed(evt);
            }
        });

        btn_Buscar_Cod_Materia.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_Buscar_Cod_Materia.setText("Buscar");

        btn_Nuevo_Materia.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btn_Nuevo_Materia.setText("Nuevo");
        btn_Nuevo_Materia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Nuevo_MateriaActionPerformed(evt);
            }
        });

        btn_Eliminar_Materia.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btn_Eliminar_Materia.setText("Eliminar");
        btn_Eliminar_Materia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Eliminar_MateriaActionPerformed(evt);
            }
        });

        btn_Guardar_Materia.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btn_Guardar_Materia.setText("Guardar");
        btn_Guardar_Materia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Guardar_MateriaActionPerformed(evt);
            }
        });

        btn_Salir_Materia.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btn_Salir_Materia.setText("Salir");
        btn_Salir_Materia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Salir_MateriaActionPerformed(evt);
            }
        });

        JT_AñoMateria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JT_AñoMateriaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout IF_MateriaLayout = new javax.swing.GroupLayout(IF_Materia.getContentPane());
        IF_Materia.getContentPane().setLayout(IF_MateriaLayout);
        IF_MateriaLayout.setHorizontalGroup(
            IF_MateriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IF_MateriaLayout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addGroup(IF_MateriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, IF_MateriaLayout.createSequentialGroup()
                        .addComponent(btn_Nuevo_Materia)
                        .addGap(49, 49, 49)
                        .addComponent(btn_Eliminar_Materia)
                        .addGap(60, 60, 60)
                        .addComponent(btn_Guardar_Materia)
                        .addGap(121, 121, 121))
                    .addComponent(btn_Salir_Materia, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, IF_MateriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(IF_MateriaLayout.createSequentialGroup()
                            .addComponent(jLabel9)
                            .addGap(65, 65, 65)
                            .addComponent(JT_CodigoMateria, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)
                            .addComponent(btn_Buscar_Cod_Materia))
                        .addGroup(IF_MateriaLayout.createSequentialGroup()
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(65, 65, 65)
                            .addComponent(JT_NombreMateria, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(IF_MateriaLayout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addGroup(IF_MateriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel11)
                                .addGroup(IF_MateriaLayout.createSequentialGroup()
                                    .addComponent(jLabel10)
                                    .addGroup(IF_MateriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(IF_MateriaLayout.createSequentialGroup()
                                            .addGap(90, 90, 90)
                                            .addComponent(jLabel7)
                                            .addGap(180, 180, 180))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, IF_MateriaLayout.createSequentialGroup()
                                            .addGap(58, 58, 58)
                                            .addGroup(IF_MateriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(RB_Activo_Materia)
                                                .addComponent(JT_AñoMateria, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(163, 163, 163))))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        IF_MateriaLayout.setVerticalGroup(
            IF_MateriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IF_MateriaLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel7)
                .addGap(69, 69, 69)
                .addGroup(IF_MateriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(IF_MateriaLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(IF_MateriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(JT_CodigoMateria, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_Buscar_Cod_Materia)))
                .addGap(30, 30, 30)
                .addGroup(IF_MateriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JT_NombreMateria, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(IF_MateriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JT_AñoMateria, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(28, 28, 28)
                .addGroup(IF_MateriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RB_Activo_Materia)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(IF_MateriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_Nuevo_Materia)
                    .addComponent(btn_Eliminar_Materia)
                    .addComponent(btn_Guardar_Materia)
                    .addComponent(btn_Salir_Materia))
                .addGap(95, 95, 95))
        );

        jDesktopPane1.add(IF_Materia, java.awt.BorderLayout.EAST);

        IF_Administracion.setClosable(true);
        IF_Administracion.setTitle("Formulario de Inscripciones");
        IF_Administracion.setMinimumSize(new java.awt.Dimension(60, 22));
        IF_Administracion.setPreferredSize(new java.awt.Dimension(800, 600));
        IF_Administracion.setVisible(true);
        IF_Administracion.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        label_Titulo_Insc.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        label_Titulo_Insc.setText("Formulario de Inscripciones");
        IF_Administracion.getContentPane().add(label_Titulo_Insc, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, -1, -1));

        jLabel12.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel12.setText("Seleccione un Alumno");
        IF_Administracion.getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 130, -1, 30));

        IF_Administracion.getContentPane().add(CB_SeleccionAlumno, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 130, 390, 30));

        jLabel13.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel13.setText("Listado de Materias");
        IF_Administracion.getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 210, -1, -1));

        RB_MateriasInsc.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        RB_MateriasInsc.setText("Materias Inscriptas");
        IF_Administracion.getContentPane().add(RB_MateriasInsc, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 260, -1, -1));

        RB_MateriasNoInsc.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        RB_MateriasNoInsc.setText("Materias no Inscriptas");
        IF_Administracion.getContentPane().add(RB_MateriasNoInsc, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 260, -1, -1));

        Tabla_Inscripciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id", "Nombre", "Año"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Tabla_Inscripciones);

        IF_Administracion.getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 320, 740, 150));

        BTN_Inscripcion.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        BTN_Inscripcion.setText("Inscripción");
        IF_Administracion.getContentPane().add(BTN_Inscripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 490, -1, -1));

        BTN_AnularInsc.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        BTN_AnularInsc.setText("Anular Inscripción");
        IF_Administracion.getContentPane().add(BTN_AnularInsc, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 490, -1, -1));

        jDesktopPane1.add(IF_Administracion, java.awt.BorderLayout.WEST);

        IF_Consultas.setClosable(true);
        IF_Consultas.setTitle("Consulta Alumnos por Materia");
        IF_Consultas.setPreferredSize(new java.awt.Dimension(800, 600));
        IF_Consultas.setVisible(true);
        IF_Consultas.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel15.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel15.setText("Seleccione una materia:");
        IF_Consultas.getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 200, 220, 32));

        jLabel16.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel16.setText("Listado de Alumnos por Materia");
        IF_Consultas.getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, -1, -1));

        TablaListAlumMateria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "DNI", "Apellido", "Nombre"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SP_Tabla.setViewportView(TablaListAlumMateria);

        IF_Consultas.getContentPane().add(SP_Tabla, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, 760, 230));

        CB_Seleccion_Materia.setMaximumRowCount(14);
        CB_Seleccion_Materia.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CB_Seleccion_MateriaItemStateChanged(evt);
            }
        });
        IF_Consultas.getContentPane().add(CB_Seleccion_Materia, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 200, 180, 32));

        jDesktopPane1.add(IF_Consultas, java.awt.BorderLayout.NORTH);

        IF_ModificacionNotas.setClosable(true);
        IF_ModificacionNotas.setTitle("Cargar Notas");
        IF_ModificacionNotas.setNormalBounds(new java.awt.Rectangle(0, 0, 71, 0));
        IF_ModificacionNotas.setPreferredSize(new java.awt.Dimension(800, 600));
        IF_ModificacionNotas.setVisible(true);

        jLabel17.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel17.setText("Actualizar Notas");

        jLabel14.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel14.setText("Seleccione un alumno");

        Tabla_Notas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Código", "Nombre", "Nota"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(Tabla_Notas);

        btn_GuardarNota.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btn_GuardarNota.setText("Guardar");

        btn_Salir.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btn_Salir.setText("Salir");

        javax.swing.GroupLayout IF_ModificacionNotasLayout = new javax.swing.GroupLayout(IF_ModificacionNotas.getContentPane());
        IF_ModificacionNotas.getContentPane().setLayout(IF_ModificacionNotasLayout);
        IF_ModificacionNotasLayout.setHorizontalGroup(
            IF_ModificacionNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IF_ModificacionNotasLayout.createSequentialGroup()
                .addGroup(IF_ModificacionNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(IF_ModificacionNotasLayout.createSequentialGroup()
                        .addGap(250, 250, 250)
                        .addComponent(jLabel17))
                    .addGroup(IF_ModificacionNotasLayout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(jLabel14)
                        .addGap(88, 88, 88)
                        .addComponent(JCB_SelecAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(IF_ModificacionNotasLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 740, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(IF_ModificacionNotasLayout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(btn_GuardarNota, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(btn_Salir, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        IF_ModificacionNotasLayout.setVerticalGroup(
            IF_ModificacionNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IF_ModificacionNotasLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel17)
                .addGap(41, 41, 41)
                .addGroup(IF_ModificacionNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JCB_SelecAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(77, 77, 77)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addGroup(IF_ModificacionNotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_GuardarNota)
                    .addComponent(btn_Salir))
                .addGap(69, 69, 69))
        );

        jDesktopPane1.add(IF_ModificacionNotas, java.awt.BorderLayout.CENTER);

        getContentPane().add(jDesktopPane1);

        Menu_Nav.setPreferredSize(new java.awt.Dimension(320, 24));

        JM_Alumno.setText("Alumno");

        form_alumno.setText("Formulario de Alumno");
        form_alumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                form_alumnoActionPerformed(evt);
            }
        });
        JM_Alumno.add(form_alumno);

        Menu_Nav.add(JM_Alumno);

        JM_Materia.setText("Materia");

        form_materia.setText("Formulario de Materia");
        form_materia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                form_materiaActionPerformed(evt);
            }
        });
        JM_Materia.add(form_materia);

        Menu_Nav.add(JM_Materia);

        JM_Admin.setText("Administración");

        form_manejoInscripciones.setText("Manejo de Inscripciones");
        form_manejoInscripciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                form_manejoInscripcionesActionPerformed(evt);
            }
        });
        JM_Admin.add(form_manejoInscripciones);

        form_modNotas.setText("Modificación de Notas");
        form_modNotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                form_modNotasActionPerformed(evt);
            }
        });
        JM_Admin.add(form_modNotas);

        Menu_Nav.add(JM_Admin);

        JM_Consultas.setText("Consultas");

        consulta_alumMaterias.setText("Alumnos por Materias");
        consulta_alumMaterias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consulta_alumMateriasActionPerformed(evt);
            }
        });
        JM_Consultas.add(consulta_alumMaterias);

        Menu_Nav.add(JM_Consultas);

        JM_Salir.setText("Salir");
        JM_Salir.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        opcionSalir.setText("Salir de la Aplicación");
        opcionSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionSalirActionPerformed(evt);
            }
        });
        JM_Salir.add(opcionSalir);

        Menu_Nav.add(JM_Salir);

        setJMenuBar(Menu_Nav);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void eliminarInternalFrames(){
        IF_Administracion.setVisible(false);
        IF_Alumno.setVisible(false);
        IF_Consultas.setVisible(false);
        IF_Materia.setVisible(false);
        IF_ModificacionNotas.setVisible(false);
    }
    
//    private void mostrar_internalFrame(JInternalFrame Ventana, boolean visibilidad){
//        Ventana.setVisible(visibilidad);        
//    }
    
    private void form_alumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_form_alumnoActionPerformed
        eliminarInternalFrames();
        IF_Alumno.setVisible(true);
        
        // Luego, cuando desees abrir la ventana interna:
        if (IF_Alumno == null || IF_Alumno.isClosed()) {            
            // Agregando la ventana interna al jDesktopPane1
            jDesktopPane1.add(IF_Alumno);
            IF_Alumno.setVisible(true); //hacerlo visible
        }

        // Me aseguro de manejar el evento de cierre para 'ocultar' en lugar de 'eliminar'
        IF_Alumno.setDefaultCloseOperation(JInternalFrame.HIDE_ON_CLOSE);
    }//GEN-LAST:event_form_alumnoActionPerformed

    private void JT_CodigoMateriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JT_CodigoMateriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JT_CodigoMateriaActionPerformed

    private void btn_Nuevo_MateriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Nuevo_MateriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_Nuevo_MateriaActionPerformed

    private void btn_Eliminar_MateriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Eliminar_MateriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_Eliminar_MateriaActionPerformed

    private void btn_Guardar_MateriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Guardar_MateriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_Guardar_MateriaActionPerformed

    private void btn_Salir_MateriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Salir_MateriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_Salir_MateriaActionPerformed

    private void JT_AñoMateriaActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                            
    private void opcionSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionSalirActionPerformed
        int confirm = JOptionPane.showConfirmDialog(
            this,
            "¿Estás seguro de que quieres cerrar la aplicación?",
            "Confirmar Cierre",
            JOptionPane.YES_NO_OPTION
        );

        if (confirm == JOptionPane.YES_OPTION) {
            // Cierra la aplicación
            System.exit(0);
        }
    }//GEN-LAST:event_opcionSalirActionPerformed

    private void form_materiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_form_materiaActionPerformed
        eliminarInternalFrames();
        IF_Materia.setVisible(true);
        
        // Luego, cuando desees abrir la ventana interna:
        if (IF_Materia == null || IF_Materia.isClosed()) {            
            // Agregando la ventana interna al jDesktopPane1
            jDesktopPane1.add(IF_Materia);
            IF_Materia.setVisible(true);
        }

        // Me aseguro de manejar el evento de cierre para 'ocultar' en lugar de 'eliminar'
        IF_Materia.setDefaultCloseOperation(JInternalFrame.HIDE_ON_CLOSE);
    }//GEN-LAST:event_form_materiaActionPerformed

    private void form_manejoInscripcionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_form_manejoInscripcionesActionPerformed
        eliminarInternalFrames();
        IF_Administracion.setVisible(true);
        
        // Luego, cuando desees abrir la ventana interna:
        if (IF_Administracion == null || IF_Administracion.isClosed()) {            
            // Agregando la ventana interna al jDesktopPane1
            jDesktopPane1.add(IF_Administracion);
            IF_Administracion.setVisible(true);
        }

        // Me aseguro de manejar el evento de cierre para 'ocultar' en lugar de 'eliminar'
        IF_Administracion.setDefaultCloseOperation(JInternalFrame.HIDE_ON_CLOSE);
    }//GEN-LAST:event_form_manejoInscripcionesActionPerformed

    private void consulta_alumMateriasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consulta_alumMateriasActionPerformed
        cargarMateriasComboBox();
        eliminarInternalFrames();
        IF_Consultas.setVisible(true);
        
        // Luego, cuando desees abrir la ventana interna:
        if (IF_Consultas == null || IF_Consultas.isClosed()) {            
            // Agregando la ventana interna al jDesktopPane1
            jDesktopPane1.add(IF_Consultas);
            IF_Consultas.setVisible(true);
        }

        // Me aseguro de manejar el evento de cierre para 'ocultar' en lugar de 'eliminar'
        IF_Consultas.setDefaultCloseOperation(JInternalFrame.HIDE_ON_CLOSE);
    }//GEN-LAST:event_consulta_alumMateriasActionPerformed

    private void btn_Nuevo_AlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Nuevo_AlumnoActionPerformed
        JT_Dni.setText("");
        JT_Apellido.setText("");
        JT_Nombre.setText("");
        RB_Activo.setSelected(false);
        JDC_FechaNac.setDate(null);        
    }//GEN-LAST:event_btn_Nuevo_AlumnoActionPerformed

    private void btn_Eliminar_AlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Eliminar_AlumnoActionPerformed
        
    }//GEN-LAST:event_btn_Eliminar_AlumnoActionPerformed

    private void btn_Guardar_AlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Guardar_AlumnoActionPerformed
        AlumnoData alumData = new AlumnoData();        
        
        String dni = JT_Dni.getText();
        String nombre = JT_Nombre.getText();
        String apellido = JT_Apellido.getText();
        
        String date = ((JTextField)JDC_FechaNac.getDateEditor().getUiComponent()).getText(); // capturo la fecha como String        

        // Convertir Date a LocalDate puuufff!!
        LocalDate fechaNac = LocalDate.parse(date);
        
        //java.sql.Date sqlDate = new java.sql.Date(fechaNac); // Convertimos a java.sql.Date        
        boolean estado = true;

        Alumno alum = new Alumno(Integer.parseInt(dni), nombre, apellido, fechaNac, estado);
        alumData.guardarAlumno(alum);        
    }//GEN-LAST:event_btn_Guardar_AlumnoActionPerformed

    private void btn_BuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_BuscarActionPerformed
        AlumnoData alumData = new AlumnoData();
        ArrayList <Alumno> alumnoBuscado = new ArrayList<>();
        String dni = JT_Dni.getText();
        int dniAlumno = Integer.parseInt(dni);
        
        try {
            alumData.buscarAlumno(dniAlumno);
        } catch (SQLException ex) {
            Logger.getLogger(GestionUniversidadGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        alumnoBuscado.add(alumData.buscarAlumnoPorDni(dniAlumno));
        // Verifica si se encontró un alumno antes de mostrar los datos
        if (!alumnoBuscado.isEmpty()) { // Al ser un solo alumno colocamos get(0), ya que el primer índice es cero
            String apellido = alumnoBuscado.get(0).getApellido();
            String nombre = alumnoBuscado.get(0).getNombre();           
            LocalDate localDate = alumnoBuscado.get(0).getFechaNac();
            java.util.Date utilDate = java.util.Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
            

            // Muestra los datos en los campos de información
            JT_Apellido.setText(apellido);
            JT_Nombre.setText(nombre);
            JDC_FechaNac.setDate(utilDate);
            RB_Activo.setSelected(true);
        } else {
            // Si no se encontró un alumno, puedes manejarlo adecuadamente
            JT_Apellido.setText("No se encontró el alumno");
            JT_Nombre.setText("");
        }
    }//GEN-LAST:event_btn_BuscarActionPerformed
    
    public int obtenerIdMateria(String nombreMateria){
        Conexion conex = new Conexion();
        // Obtengo el ID de la materia seleccionada en función del nombre capturado en el comboBox
                //String nombreMateriaSeleccionada = (String) CB_Seleccion_Materia.getSelectedItem();
                
                // Realizo la consulta sql para obtener el ID de la materia en función del nombre
                String sqlObtenerIdMateria = "SELECT idMateria FROM materia WHERE nombre = ?";
                int idMateriaSeleccionada = -1; // Valor predeterminado en caso de que no se encuentre la materia (no existe un item -1)
                
                try (PreparedStatement ps = conex.Conexion_Maria().prepareStatement(sqlObtenerIdMateria)) {
                    ps.setString(1, nombreMateria); // Configura el parámetro con el nombre seleccionado
                    ResultSet rs = ps.executeQuery();
                    
                    if (rs.next()) {
                        idMateriaSeleccionada = rs.getInt("idMateria"); // Obtiene el ID de la materia
                    }
                } catch (SQLException e1) {
                    System.out.println("Error al obtener el ID de la materia. ERROR: " + e1);
                }
        //System.out.println("El id de la materia " + nombreMateria + " es: " + idMateriaSeleccionada);
        return idMateriaSeleccionada;
    }
    
    private void CB_Seleccion_MateriaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CB_Seleccion_MateriaItemStateChanged
        
        InscripcionData inscData = new InscripcionData();
        String nombreMateria = (String) CB_Seleccion_Materia.getSelectedItem();
        List<Alumno> alumnosEnMateria = inscData.obtenerAlumnoPorMateria(obtenerIdMateria(nombreMateria));
        // Obtengo la lista de alumnos        

        // Obtengo el modelo de la tabla existente
        DefaultTableModel modeloTabla = (DefaultTableModel) TablaListAlumMateria.getModel();

        // Limpia la tabla (borra todas las filas existentes)
        modeloTabla.setRowCount(0);

        // Itero sobre la lista de alumnos y agrego a cada alumno a la tabla
        alumnosEnMateria.forEach((alumno) -> {
            // Agrega una fila con los datos del alumno en el mismo orden que las columnas
            modeloTabla.addRow(new Object[]{alumno.getId_alumno(), alumno.getDni(), alumno.getNombre(), alumno.getApellido()});
        });

        // Actualiza la tabla para que se muestren los nuevos datos
        modeloTabla.fireTableDataChanged();
          
    }//GEN-LAST:event_CB_Seleccion_MateriaItemStateChanged

    private void form_modNotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_form_modNotasActionPerformed
        eliminarInternalFrames();
        IF_ModificacionNotas.setVisible(true);
        
        // Luego, cuando desees abrir la ventana interna:
        if (IF_ModificacionNotas == null || IF_ModificacionNotas.isClosed()) {            
            // Agregando la ventana interna al jDesktopPane1
            jDesktopPane1.add(IF_ModificacionNotas);
            IF_ModificacionNotas.setVisible(true); //hacerlo visible
        }

        // Me aseguro de manejar el evento de cierre para 'ocultar' en lugar de 'eliminar'
        IF_ModificacionNotas.setDefaultCloseOperation(JInternalFrame.HIDE_ON_CLOSE);
    }//GEN-LAST:event_form_modNotasActionPerformed

    private void cargarMateriasComboBox() {
        
        Conexion conex = new Conexion();
        // Usar un conjunto (Set) para almacenar las materias sin duplicados
            Set<String> materias = new HashSet<>();
        
        try {
            // Consulta SQL para obtener todas las materias sin repetir
            String sql = "SELECT DISTINCT nombre FROM materia";
            try (PreparedStatement ps = conex.Conexion_Maria().prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
                
                ResultSet rs = ps.executeQuery();
                
                // Iterar a través de los resultados y agregar las materias al conjunto
                while (rs.next()) {
                    materias.add(rs.getString("nombre"));
                }
//                System.out.println("Estas son todas las materias");
//                System.out.println(materias);
                // Agregar las materias al JComboBox
                materias.forEach((materia) -> { //uso una función operacional.
                    CB_Seleccion_Materia.addItem(materia);
                });
                
                
                if (rs.next()) {
                    //alumno.setId_alumno(rs.getInt("idAlumno"));
                    JOptionPane.showMessageDialog(null, "Alumno añadido con exito.");
                    
                } 
            }           
                        
        } catch (SQLException e) {
            System.out.println("No se ha cargado el comboBox, error: " + e);
            // Manejar cualquier excepción que pueda ocurrir durante la carga de datos
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionUniversidadGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionUniversidadGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionUniversidadGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionUniversidadGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionUniversidadGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTN_AnularInsc;
    private javax.swing.JButton BTN_Inscripcion;
    private javax.swing.JComboBox<String> CB_SeleccionAlumno;
    private javax.swing.JComboBox<String> CB_Seleccion_Materia;
    private javax.swing.JInternalFrame IF_Administracion;
    private javax.swing.JInternalFrame IF_Alumno;
    private javax.swing.JInternalFrame IF_Consultas;
    private javax.swing.JInternalFrame IF_Materia;
    private javax.swing.JInternalFrame IF_ModificacionNotas;
    private javax.swing.JComboBox<String> JCB_SelecAlumnos;
    private com.toedter.calendar.JDateChooser JDC_FechaNac;
    private javax.swing.JMenu JM_Admin;
    private javax.swing.JMenu JM_Alumno;
    private javax.swing.JMenu JM_Consultas;
    private javax.swing.JMenu JM_Materia;
    private javax.swing.JMenu JM_Salir;
    private javax.swing.JTextField JT_Apellido;
    private javax.swing.JTextField JT_AñoMateria;
    private javax.swing.JTextField JT_CodigoMateria;
    private javax.swing.JTextField JT_Dni;
    private javax.swing.JTextField JT_Nombre;
    private javax.swing.JTextField JT_NombreMateria;
    private javax.swing.JMenuBar Menu_Nav;
    private javax.swing.JRadioButton RB_Activo;
    private javax.swing.JRadioButton RB_Activo_Materia;
    private javax.swing.JRadioButton RB_MateriasInsc;
    private javax.swing.JRadioButton RB_MateriasNoInsc;
    private javax.swing.JScrollPane SP_Tabla;
    private javax.swing.JTable TablaListAlumMateria;
    private javax.swing.JTable Tabla_Inscripciones;
    private javax.swing.JTable Tabla_Notas;
    private javax.swing.JButton btn_Buscar;
    private javax.swing.JButton btn_Buscar_Cod_Materia;
    private javax.swing.JButton btn_Eliminar_Alumno;
    private javax.swing.JButton btn_Eliminar_Materia;
    private javax.swing.JButton btn_GuardarNota;
    private javax.swing.JButton btn_Guardar_Alumno;
    private javax.swing.JButton btn_Guardar_Materia;
    private javax.swing.JButton btn_Nuevo_Alumno;
    private javax.swing.JButton btn_Nuevo_Materia;
    private javax.swing.JButton btn_Salir;
    private javax.swing.JButton btn_Salir_Materia;
    private javax.swing.JMenuItem consulta_alumMaterias;
    private javax.swing.JMenuItem form_alumno;
    private javax.swing.JMenuItem form_manejoInscripciones;
    private javax.swing.JMenuItem form_materia;
    private javax.swing.JMenuItem form_modNotas;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel label_Titulo_Insc;
    private javax.swing.JMenuItem opcionSalir;
    // End of variables declaration//GEN-END:variables

    private void armarCabecera(){

        modelo.addColumn("Id");
        modelo.addColumn("DNI");        
        modelo.addColumn("Apellido");
        modelo.addColumn("Nombre");
        modelo.addColumn("Estado");

        TablaListAlumMateria.setModel(modelo);
}
    
    
    
}


/*
    CREATE TABLE inscripcion (
    idInscripcion INT AUTO_INCREMENT PRIMARY KEY,
    nota DOUBLE,
    idAlumno INT,
    idMateria INT,
    -- Restricción única para evitar inscripciones duplicadas
    UNIQUE KEY unique_inscripcion (idAlumno, idMateria),
    FOREIGN KEY (idAlumno) REFERENCES alumno(idAlumno),
    FOREIGN KEY (idMateria) REFERENCES materia(idMateria)
);


    public boolean verificarInscripcionDuplicada(int idAlumno, int idMateria) {
    Conexion conn = new Conexion();

    try {
        String sql = "SELECT COUNT(*) AS count FROM inscripcion WHERE idAlumno = ? AND idMateria = ?";
        
        try (PreparedStatement ps = conn.Conexion_Maria().prepareStatement(sql)) {
            ps.setInt(1, idAlumno);
            ps.setInt(2, idMateria);
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()) {
                int count = rs.getInt("count");
                return count > 0; // Si count es mayor que 0, ya existe una inscripción.
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error al verificar inscripción duplicada: " + ex.getMessage());
        System.out.println("El error es: " + ex);
    }
    
    return false; // Si hubo un error o no se encontró ninguna inscripción, se asume que no está duplicada.
}

public void insertarInscripcion(int idAlumno, int idMateria, double nota) {
    Conexion conn = new Conexion();

    // Verificar si la inscripción ya existe antes de insertar
    if (!verificarInscripcionDuplicada(idAlumno, idMateria)) {
        try {
            String sql = "INSERT INTO inscripcion (idAlumno, idMateria, nota) VALUES (?, ?, ?)";
            
            try (PreparedStatement ps = conn.Conexion_Maria().prepareStatement(sql)) {
                ps.setInt(1, idAlumno);
                ps.setInt(2, idMateria);
                ps.setDouble(3, nota);
                
                int rowsAffected = ps.executeUpdate();
                
                if (rowsAffected > 0) {
                    System.out.println("Inscripción insertada correctamente.");
                } else {
                    System.out.println("No se pudo insertar la inscripción.");
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error al insertar inscripción: " + ex.getMessage());
            System.out.println("El error es: " + ex);
        }
    } else {
        System.out.println("La inscripción ya existe, no se insertará duplicada.");
    }
}



*/